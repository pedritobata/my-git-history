{"version":3,"sources":["components/commons/Loader.tsx","utils/axios.ts","api/githubOperations.ts","store/constants/commitConstants.ts","store/constants/userConstants.ts","store/actions/userActions.ts","store/actions/commitActions.ts","components/modalExploreUser/ModalExploreUser.tsx","store/constants/commonConstants.ts","components/header/hooks/useHeader.ts","components/header/Header.tsx","containers/layout/Layout.tsx","components/commons/Message.tsx","utils/utils.ts","pages/commits/Commits.tsx","components/app/App.tsx","reportWebVitals.ts","store/reducers/commitReducers.ts","store/reducers/userReducers.ts","store/store.ts","index.tsx"],"names":["Loader","props","Spinner","style","width","height","margin","display","className","axiosIntance","axios","create","baseURL","GithubOperations","owner","repo","branch","commitList","get","response","data","nickname","user","COMMIT_LIST_REQUEST","COMMIT_LIST_SUCCESS","COMMIT_LIST_FAIL","USER_REQUEST","USER_SUCCESS","USER_FAIL","getUser","dispatch","a","type","payload","console","error","message","listCommits","getCommitList","commits","length","Error","ModalExploreUser","useState","enteredUser","setEnteredUser","showErrorMessage","setShowErrorMessage","useDispatch","Modal","onHide","aria-labelledby","autofocus","centered","Header","closeButton","Title","id","Body","InputGroup","FormControl","value","onChange","e","target","placeholder","aria-label","Append","Button","variant","onClick","DEFAULT_OWNER","useHeader","useSelector","state","loading","showModal","setShowModal","children","useEffect","login","show","animation","Jumbotron","fluid","Container","Row","Col","xs","md","repoName","href","Image","src","avatar_url","alt","name","size","Layout","Message","Alert","formatDatePresentation","date","castDate","Date","getMonth","getDate","getFullYear","extractTime","slice","buildCommitListGroupedByDate","result","commit","commitDate","push","Commits","branchChangeHandler","selectedBranch","repoChangeHandler","repoOwnerNickname","DropdownButton","title","repos","map","item","Dropdown","Item","bind","language","branches","Badge","pill","fontSize","cursor","Object","entries","Table","striped","bordered","hover","responsive","commitMessage","committerAvatarUrl","committerName","committerNickname","commitHtmlUrl","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","combineReducers","action","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e28da4ff.chunk.js","sourcesContent":["import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nconst Loader = (props) => {\n\n    return (\n        <Spinner {...props} style={{width: '100px', height: '100px', margin: 'auto', display: \"block\"}}>\n            <span className=\"sr-only\">loading...</span>\n        </Spinner>\n    );\n}\n\nexport default Loader;","import axios from 'axios';\n\nconst axiosIntance = axios.create({\n    baseURL: \"http://127.0.0.1:5000\"\n});\n\nexport default axiosIntance;","import CommitList from \"../store/interfaces/commitList\";\nimport axios from \"../utils/axios\";\nimport User from '../store/interfaces/user';\n\nexport default class GithubOperations {\n  public static async getCommitList(\n    owner: string,\n    repo: string,\n    branch: string\n  ) : Promise<CommitList>{\n    let commitList: Promise<CommitList> | null = null;\n    const response = await axios.get(\n      `/api/github-repos/${owner}/${repo}/commits?sha=${branch}`\n    );\n    commitList = response.data as Promise<CommitList>;\n\n    return commitList;\n  }\n\n  public static async getUser(\n    nickname: string,\n  ) : Promise<User>{\n    let user: Promise<User> | null = null;\n    const response = await axios.get(\n      `/api/github-users/${nickname}`\n    );\n    user = response.data as Promise<User>;\n\n    return user;\n  }\n}\n\n\n","\n\nexport const COMMIT_LIST_REQUEST = \"COMMIT_LIST_REQUEST\";\nexport const COMMIT_LIST_SUCCESS = \"COMMIT_LIST_SUCCESS\";\nexport const COMMIT_LIST_FAIL = \"COMMIT_LIST_FAIL\";","\n\nexport const USER_REQUEST = \"USER_REQUEST\";\nexport const USER_SUCCESS = \"USER_SUCCESS\";\nexport const USER_FAIL = \"USER_FAIL\";","import GithubOperations from \"../../api/githubOperations\";\nimport {\n  USER_REQUEST,\n  USER_SUCCESS,\n  USER_FAIL,\n} from \"../constants/userConstants\";\n\nexport const getUser = (nickname: string) => {\n  return async (dispatch) => {\n    dispatch({ type: USER_REQUEST });\n    try {\n      const user = await GithubOperations.getUser(nickname);\n      dispatch({ type: USER_SUCCESS, payload: user });\n    } catch (error) {\n      console.error(\"Failed fetching user from api\");\n      dispatch({ type: USER_FAIL, payload: error.message });\n    }\n  };\n};\n","import GithubOperations from \"../../api/githubOperations\";\nimport {\n  COMMIT_LIST_REQUEST,\n  COMMIT_LIST_SUCCESS,\n  COMMIT_LIST_FAIL,\n} from \"../constants/commitConstants\";\nimport { getUser } from \"./userActions\";\n\nexport const listCommits = (owner: string, repo: string, branch: string) => {\n  return async (dispatch) => {\n    dispatch({ type: COMMIT_LIST_REQUEST });\n    try {\n      const commits = await GithubOperations.getCommitList(owner, repo, branch);\n      if(commits.commitList.length === 0){\n        throw new Error(\"No commits were found.\");\n      }\n      await dispatch({ type: COMMIT_LIST_SUCCESS, payload: commits });\n      await dispatch(getUser(owner));\n    } catch (error) {\n      console.error(error);\n      dispatch(getUser(owner));\n      dispatch({ type: COMMIT_LIST_FAIL, payload: \"Failed fetching commit list from api\" });\n    }\n  };\n};\n","import React, { useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { listCommits } from '../../store/actions/commitActions';\nimport { useDispatch } from 'react-redux';\n\ntype ModalExploreUserProps = {\n  show: boolean;\n  animation: boolean;\n  onHide: Function;\n};\n\nconst ModalExploreUser: React.FC<ModalExploreUserProps> = (props) => {\n  const [enteredUser, setEnteredUser] = useState(\"\");\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const userChangeHandler = (e) => {\n    setEnteredUser(e.target.value);\n    setShowErrorMessage(false);\n  };\n\n  const loadReposHandler = () => {\n    if (!enteredUser) {\n      return setShowErrorMessage(true);\n    }\n    dispatch(listCommits(enteredUser, 'xxx', 'master'));\n    setEnteredUser('');\n    setShowErrorMessage(false);\n    props.onHide();\n  };\n\n  const hideHandler = () => {\n    setEnteredUser('');\n    setShowErrorMessage(false);\n    props.onHide();\n  }\n\n  return (\n    <Modal  {...props} onHide={hideHandler} aria-labelledby=\"contained-modal-title-vcenter\" autofocus centered>\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Explore a new User\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"my-3\">\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            value={enteredUser}\n            onChange={userChangeHandler}\n            placeholder=\"Enter a username\"\n            aria-label=\"Enter a username\"\n          />\n          <InputGroup.Append>\n            <Button variant=\"success\" onClick={loadReposHandler}>\n              Load repos\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n        {showErrorMessage && (\n          <InputGroup>\n            <p className=\"text-danger d-block\">Please provide a username.</p>\n          </InputGroup>\n        )}\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ModalExploreUser;\n","\nexport const DEFAULT_OWNER = \"pedritobata\";\nexport const DEFAULT_REPO = \"my-git-history\";\nexport const DEFAULT_BRANCH = \"master\";","import { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from 'react';\nimport State from '../../../store/interfaces/state';\n\n\nexport function useHeader(){\n    const { user, loading, error } = useSelector((state: State) => state.user);\n  const { commitList } = useSelector((state: State) => state.commits);\n  const dispatch = useDispatch();\n\n  const [showModal, setShowModal] = useState(false);\n  \n\n  return {\n      user,\n      loading,\n      error,\n      commitList,\n      dispatch,\n      showModal,\n      setShowModal\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Jumbotron, Container, Row, Col, Image, Button } from \"react-bootstrap\";\nimport Loader from \"../commons/Loader\";\nimport ModalExploreUser from \"../modalExploreUser/ModalExploreUser\";\nimport { getUser } from \"../../store/actions/userActions\";\nimport { DEFAULT_OWNER } from \"../../store/constants/commonConstants\";\nimport {useHeader} from './hooks/useHeader';\n\ntype HeaderProps = {};\n\nconst Header: React.FC<HeaderProps> = ({ children }) => {\n  \n  const { user, loading, error } = useHeader();\n  const { commitList } = useHeader();\n  const {dispatch} = useHeader();\n\n  const {showModal, setShowModal} = useHeader();\n\n  useEffect(() => {\n    if (user?.login) {\n      dispatch(getUser(user.login));\n    } else {\n      dispatch(getUser(DEFAULT_OWNER));\n    }\n  }, []);\n\n  const openChangeUserHandler = () => {\n    setShowModal(true);\n  };\n\n  const changeUserHandler = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <header>\n      <ModalExploreUser\n        show={showModal}\n        animation={true}\n        onHide={changeUserHandler}\n      />\n      <Jumbotron className=\"bg-dark\" fluid>\n        <Container>\n          <Row>\n            <Col xs={12} md={8}>\n              <h1 className=\"text-white\">Commit Explorer</h1>\n              <p className=\"text-white\">\n                Here you can see all the commits that were made to any branch in\n                any Github repo you want to.\n              </p>\n            </Col>\n            <Col xs={12} md={4} style={{ width: \"180px\" }}>\n              {loading && !commitList.repoName ? (\n                <Loader\n                  animation=\"grow\"\n                  variant=\"light\"\n                  style={{ width: \"100%\", height: \"100%\" }}\n                />\n              ) : (\n                <div className=\"h-100 w-100 d-flex flex-column align-items-center\">\n                  <a\n                    className=\"justify-content-center d-flex\"\n                    href={`https://www.github.com/${user.login}`}\n                  >\n                    <Image\n                      className=\"rounded-circle w-50 mx-auto\"\n                      src={user.avatar_url}\n                      alt={user.login}\n                    />\n                  </a>\n                  <p className=\"font-weight-bold text-white mt-2\">\n                    {user.name ? user.name : user.login}\n                  </p>\n                  <Button\n                    onClick={openChangeUserHandler}\n                    variant=\"outline-success\"\n                    size=\"lg\"\n                    className=\"text-nowrap\"\n                  >\n                    Explore other user's repos\n                  </Button>\n                </div>\n              )}\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Header from \"../../components/header/Header\";\n\ntype LayoutProps = {};\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n  return (\n    <div>\n      <Header />\n      <Container>{children}</Container>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Message = ({variant, children}) => {\n\n    return (\n        <Alert variant={variant}>\n            {children}\n        </Alert>\n    );\n}\n\nexport default Message;","\n// MANAGING DATES\n\nimport Commit from \"../store/interfaces/commit\";\nimport CommitsGroupedbyDate from \"../store/interfaces/commitsGroupedByDate\";\n\nexport function isSameYearMonthDay(date1: string, date2: string) : boolean {\n    const monthAndDay1 = date1.slice(5,10); \n    const monthAndDay2 = date2.slice(5,10); \n    return monthAndDay1 === monthAndDay2;\n}\n\nexport function formatDatePresentation(date: string) : string {\n    const months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n    const castDate: Date = new Date(date);\n    const formattedDate = months[castDate.getMonth()] + ' ' + +castDate.getDate() + ', ' + castDate.getFullYear()\n    return formattedDate;\n} \n\nexport function extractTime(date: string) : string {\n    return date.slice(11, date.length - 1);\n}\n\n\n/**\n * Transforming commit list to an Object containing grouped commits by date\n * @param commitList \n */\nexport function buildCommitListGroupedByDate(commitList: Commit[]): CommitsGroupedbyDate{\n    let result: CommitsGroupedbyDate = {};\n    for(let commit of commitList){\n        if(!result[formatDatePresentation(commit.commitDate)]) {\n            result[formatDatePresentation(commit.commitDate)] = [commit];\n        } else {\n            result[formatDatePresentation(commit.commitDate)].push(commit);\n        }\n    }\n    return result;\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Table,\n  Button,\n  Row,\n  Col,\n  Image,\n  DropdownButton,\n  Dropdown,\n  Badge,\n} from \"react-bootstrap\";\nimport State from \"../../store/interfaces/state\";\nimport { listCommits } from \"../../store/actions/commitActions\";\nimport Loader from \"../../components/commons/Loader\";\nimport Message from \"../../components/commons/Message\";\nimport {\n  DEFAULT_OWNER,\n  DEFAULT_BRANCH,\n  DEFAULT_REPO,\n} from \"../../store/constants/commonConstants\";\nimport { buildCommitListGroupedByDate, extractTime } from \"../../utils/utils\";\n\nconst Commits: React.FC = () => {\n  const { commitList, loading, error } = useSelector(\n    (state: State) => state.commits\n  );\n  const { user } = useSelector((state: State) => state.user);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(listCommits(DEFAULT_OWNER, DEFAULT_REPO, DEFAULT_BRANCH));\n  }, []);\n\n  const branchChangeHandler = (selectedBranch: string) => {\n    dispatch(listCommits(user.login, commitList.repoName, selectedBranch));\n  };\n\n  const repoChangeHandler = (repo: string) => {\n    dispatch(listCommits(user.login, repo, \"master\"));\n  };\n\n  const refreshCommitsHandler = () => {\n    dispatch(listCommits(user.login, commitList.repoName, commitList.branch));\n  }\n\n  return (\n    <main>\n      {loading && !commitList.repoName ? (\n        <Loader animation=\"border\" variant=\"primary\" />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <>\n          <Row className=\"d-flex align-items-center my-3\">\n            <Col className=\"d-flex my-2\" md={7} xs={12}>\n              <h5 className=\"m-0\">Exploring now :</h5>\n\n              <p className=\"my-0 ml-3\">\n                <span>{commitList.repoOwnerNickname || \"unknown\"}</span> |{\" \"}\n                <a\n                  href={`https://www.github.com/${commitList.repoOwnerNickname}/${commitList.repoName}`}\n                >\n                  <span className=\"text-primary font-weight-bold\">\n                    {commitList.repoName}\n                  </span>\n                </a>\n                <small className=\"ml-2\">\n                  ({commitList.commitList.length} commits)\n                </small>\n              </p>\n            </Col>\n            <Col\n              className=\"d-flex align-items-center justify-content-end my-2\"\n              md={5} xs={12}\n            >\n              <span className=\"mr-2\">\n                {commitList.repoOwnerNickname || \"unknown\"}'s repos:{\" \"}\n              </span>\n\n              <DropdownButton title={commitList.repoName}>\n                {commitList.repos.map((item) => (\n                  <Dropdown.Item\n                    onClick={repoChangeHandler.bind(null, item.name)}\n                  >\n                    {item.name} -{\" \"}\n                    <span className=\"font-weight-lighter\">{item.language}</span>\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n            </Col>\n          </Row>\n          <Row className=\"mb-3 ml-2\">\n            <DropdownButton\n              title={<i className=\"fas fa-code-branch\">{commitList.branch}</i>}\n              variant=\"secondary\"\n            >\n              {commitList.branches.map((item) => {\n                return commitList.branches.length === 0 ? (\n                  \"No branches found\"\n                ) : (\n                  <Dropdown.Item onClick={branchChangeHandler.bind(null, item)}>\n                    {item}\n                  </Dropdown.Item>\n                );\n              })}\n            </DropdownButton>\n            <Badge\n              className=\"p-2 d-flex justify-content-center align-items-center mx-3\"\n              pill\n              variant=\"success\"\n              style={{width: \"5rem\", fontSize: \".9rem\", cursor: \"pointer\"}}\n              onClick={refreshCommitsHandler}\n            >\n              <i className=\"fas fa-sync\">Refresh</i>\n            </Badge>\n          </Row>\n        </>\n      )}\n      {loading ? (\n        <Loader animation=\"border\" variant=\"primary\" />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        Object.entries(buildCommitListGroupedByDate(commitList.commitList)).map(\n          ([date, commits]) => {\n            return (\n              <>\n                <p className=\"text-body\">Commits on {date}</p>\n                <Table striped bordered hover responsive className=\"table-sm\">\n                  <tbody>\n                    {commits.map((commit) => (\n                      <tr key={commit.commitDate}>\n                        <td className=\"flex-column p-2 w-75\">\n                          <span>{commit.commitMessage}</span>\n                          <div>\n                            <Image\n                              className=\"rounded-circle\"\n                              style={{ width: \"20px\" }}\n                              fluid\n                              src={commit.committerAvatarUrl}\n                              alt={commit.committerName}\n                            />\n                            <a\n                              href={`https://www.github.com/${commitList.repoOwnerNickname}`}\n                            >\n                              <span className=\"ml-2 font-weight-bolder text-dark\">\n                                {commit.committerNickname}\n                              </span>\n                            </a>\n                            <span className=\"text-primary ml-2\">\n                              committed at {extractTime(commit.commitDate)}\n                            </span>\n                          </div>\n                        </td>\n\n                        <td className=\"align-middle\">\n                          <a\n                            className=\"text-decoration-none\"\n                            href={commit.commitHtmlUrl}\n                          >\n                            <Button\n                              variant=\"outline-primary\"\n                              className=\"btn-sm d-block m-auto\"\n                            >\n                              See details in github\n                            </Button>\n                          </a>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              </>\n            );\n          }\n        )\n      )}\n    </main>\n  );\n};\n\nexport default Commits;\n","import './App.scss';\nimport Layout from '../../containers/layout/Layout';\nimport Commits from '../../pages/commits/Commits';\n\nfunction App() {\n\n\n  return (\n     <Layout>\n       <Commits />\n     </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  COMMIT_LIST_REQUEST,\n  COMMIT_LIST_SUCCESS,\n  COMMIT_LIST_FAIL,\n} from \"../constants/commitConstants\";\nimport CommitsState from \"../interfaces/commitsState\";\n\nconst initialState: CommitsState = {\n  commitList: {\n    branches: [],\n    commitList: [],\n    repoName: \"\",\n    repoOwnerNickname: \"\",\n    repos: [],\n    branch: \"\"\n  },\n  error: \"\",\n  loading: true,\n};\n\nexport function listCommitsReducer(\n  state: CommitsState = initialState,\n  action\n) {\n  switch (action.type) {\n    case COMMIT_LIST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case COMMIT_LIST_SUCCESS:\n      return {\n        ...state,\n        commitList: action.payload,\n        loading: false,\n        error: ''\n      };\n    case COMMIT_LIST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        commitList: {},\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  USER_REQUEST,\n  USER_SUCCESS,\n  USER_FAIL,\n} from \"../constants/userConstants\";\nimport UserState from '../interfaces/userState';\n\nconst initialState: UserState = {\n  user: {\n   name: \"\",\n   login: \"\",\n   avatar_url: \"\"\n  },\n  error: \"\",\n  loading: true,\n};\n\nexport function getUserReducer(\n  state: UserState = initialState,\n  action\n) {\n  switch (action.type) {\n    case USER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case USER_SUCCESS:\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n        error: ''\n      };\n    case USER_FAIL:\n      return {\n        ...state,\n        loading: false,\n        user: {},\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { listCommitsReducer } from './reducers/commitReducers';\nimport { getUserReducer } from './reducers/userReducers';\n\n\nconst reducer = combineReducers({\n    commits: listCommitsReducer,\n    user: getUserReducer\n});\n\nconst middlewares = [thunk];\n\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(...middlewares)));\n\nexport default store;","// @ts-ignore\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  \n    <Provider store={store}>\n      <App />\n    </Provider>\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}